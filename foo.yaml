AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31
Resources:
  itunesPackagesToUpload:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-itunespac-${AWS::AccountId}
  FargateDispatcher:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-FargateDispatcher
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: FargateDispatcher
      CodeUri: src/Function
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - Statement:
            - Effect: Allow
              Action:
                - ecs:RunTask
                - ecs:DescribeTasks
                - ecs:StopTask
              Resource:
                - !Ref DockerTask
                - !Sub arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:task/*
        - Statement:
            - Effect: Allow
              Action:
                - iam:PassRole
              Resource:
                - !GetAtt DockerTaskExecutionRole.Arn
                - !GetAtt DockerTaskTaskRole.Arn
      Events:
        itunesPackagesToUpload:
          Type: S3
          Properties:
            Bucket: !Ref itunesPackagesToUpload
            Events:
              - s3:ObjectCreated:*
              - s3:ObjectRemoved:*
      Environment:
        Variables:
          DOCKER_TASK_ARN: !Ref DockerTask
          DOCKER_TASK_SUBNETS: !Join
            - ','
            - !Ref DefaultVPCSubnets
  FargateDispatcherDeployTrigger:
    Type: Custom::FunctionDeployTrigger
    Properties:
      ServiceToken: !GetAtt FargateDispatcher.Arn
  DockerTask:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: hello-world
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref DockerTaskLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: logs
          Name: 0
      Cpu: 1024
      ExecutionRoleArn: !GetAtt DockerTaskExecutionRole.Arn
      Memory: 2048
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      TaskRoleArn: !GetAtt DockerTaskTaskRole.Arn
      Volumes: []
    DependsOn: DockerTaskLogGroup
  DockerTaskLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /stackery/task/${AWS::StackName}-DockerTask/logs
  DockerTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTask-execution
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Policies:
        - PolicyName: DownloadDockerImagesFromECR
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:*:*:log-group:/stackery/task/${AWS::StackName}-*
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: '*'
  DockerTaskTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-DockerTask-task
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
  FileUploads:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-fileuploa-${AWS::AccountId}
  ThumbnailExtractor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ThumbnailExtractor
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: ThumbnailExtractor
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName: !Ref DataStorage
      Events:
        FileUploads:
          Type: S3
          Properties:
            Bucket: !Ref FileUploads
            Events:
              - s3:ObjectCreated:*
              - s3:ObjectRemoved:*
      Environment:
        Variables:
          BUCKET_NAME: !Ref DataStorage
          BUCKET_ARN: !GetAtt DataStorage.Arn
  DataStorage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-datastora-${AWS::AccountId}
  Topic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub ${AWS::StackName}-Topic
  UploadProcessor:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-UploadProcessor
      Description: !Sub
        - Stack ${StackTagName} Environment ${EnvironmentTagName} Function ${ResourceName}
        - ResourceName: UploadProcessor
      CodeUri: src/Function2
      Handler: index.handler
      Runtime: nodejs12.x
      MemorySize: 3008
      Timeout: 30
      Tracing: Active
      Policies:
        - AWSXrayWriteOnlyAccess
        - S3CrudPolicy:
            BucketName: !Ref DataStorage
        - S3CrudPolicy:
            BucketName: !Ref UploadProcessorInputFiles
      Events:
        Topic:
          Type: SNS
          Properties:
            Topic: !Ref Topic
      Environment:
        Variables:
          BUCKET_NAME: !Ref DataStorage
          BUCKET_ARN: !GetAtt DataStorage.Arn
          BUCKET_NAME_2: !Ref UploadProcessorInputFiles
          BUCKET_ARN_2: !GetAtt UploadProcessorInputFiles.Arn
  UploadProcessorInputFiles:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AWS::StackName}-uploadpro-${AWS::AccountId}
Parameters:
  StackTagName:
    Type: String
    Description: Stack Name (injected by Stackery at deployment time)
  EnvironmentTagName:
    Type: String
    Description: Environment Name (injected by Stackery at deployment time)
  DefaultVPCSubnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: AWS account-specific default VPC subnets (injected by Stackery at deployment time)